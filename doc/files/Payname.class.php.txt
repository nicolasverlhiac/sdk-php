<?php

/**
 * File Payname
 */

namespace Payname;

require_once(realpath(dirname(__FILE__) . '/Exception.class.php'));
use \Payname\Exception;

if (realpath(dirname(__FILE__) . '/Config.class.php') == '') {
    // Config.class.php not found => error
    throw new Exception(
        'ERROR - Config file not found.'
        . ' Cf. Config.class.php.sample for an example config file.'
    );
}
require_once(realpath(dirname(__FILE__) . '/Config.class.php'));
use \Payname\Config;

/**
 * Main SDK class
 *
 * @package  Payname
 */
class Payname {


    /**
     * Auth token
     */
    private static $_token = '';



    // -------------------------------------------------------------------------
    // PRIVATE API METHODS
    // -------------------------------------------------------------------------


    /**
     * Call URL with cURL
     *
     * @param  string  $sMethod    HTTP Method to use (GET, PUT, etc.)
     * @param  string  $sUrl       Complete URL to call
     * @param  array   $aPostData  (Optional) Array of key/values to send via POST
     *
     * @throw  \Payname\Exception  On API error
     *
     * @return  boolean|string  Raw API response
     */
    private static function _call_curl($sMethod, $sUrl, $aPostData = null) {

        $aOpts = array(
            CURLOPT_URL => $sUrl
            , CURLOPT_RETURNTRANSFER => true
            , CURLOPT_CUSTOMREQUEST => $sMethod
            , CURLOPT_HTTPHEADER => array('Authorization: ' . static::$_token)
        );

        if (!is_null($aPostData)) {
            $aOpts[CURLOPT_POSTFIELDS] = http_build_query($aPostData);
        }

        $oCurl = curl_init();
        curl_setopt_array($oCurl, $aOpts);

        return curl_exec($oCurl);
    }


    /**
     * Call URL with 'vanilla' PHP functions
     *
     * @param  string  $sMethod    HTTP Method to use (GET, PUT, etc.)
     * @param  string  $sUrl       Complete URL to call
     * @param  array   $aPostData  (Optional) Array of key/values to send via POST
     *
     * @throw  \Payname\Exception  On API error
     *
     * @return  boolean|string  Raw API response
     */
    private static function _call_vanilla($sMethod, $sUrl, $aPostData = null) {

        $aCtxOpts = array(
            'http' => array(
                'method' => $sMethod
                , 'ignore_errors' => true
                , 'header' => 'Authorization: ' . static::token()
                    . "\n" . 'Content-type: application/json'
            )
        );

        if (!is_null($aPostData)) {
            $aCtxOpts['http']['content'] = json_encode($aPostData);
        }

        $oFile = fopen($sUrl, 'rb', false, stream_context_create($aCtxOpts));
        if (!$oFile) {
            $mRes = false;
        } else {
            $mRes = stream_get_contents($oFile);
        }

        if ($mRes === false) {
            throw new Exception(
                $sMethod . ' ' . $sUrl . ' ERROR: ' . $php_errormsg
            );
        }
        return $mRes;
    }


    /**
     * Call URL
     *
     * @param  array  $aOptions  Call options
     *
     * @throws  Exception  On API error
     *
     * @return  array  API response
     */
    private static function _call($aOptions) {

        if (!Config::OAUTH) {
            static::token(Config::SECRET);
        }


        /* PHP Vanilla version */
        $sMethod = $aOptions['method'];
        $sUrl = Config::HOST . $aOptions['url'];
        $aPostData = (isset($aOptions['postData']))
            ? $aOptions['postData']
            : null;

        if (Config::USE_CURL) {
            $mRes = static::_call_curl($sMethod, $sUrl, $aPostData);
        } else {
            $mRes = static::_call_vanilla($sMethod, $sUrl, $aPostData);
        }
        $aResult = json_decode($mRes, true);

        if ($aResult === null) {
            throw new Exception(
                $sMethod . ' ' . $sUrl . ' did not send valid JSON: ' . $mRes
            );
        }

        if (!$aResult['success']) {
            throw new Exception(
                $aResult['error']
                . ' - ' . $aResult['msg']
                . (isset($aResult['data'])
                    ? ' - ' . json_encode($aResult['data'], JSON_UNESCAPED_UNICODE)
                    : ''
                )
            );
        }

        return $aResult;
    }



    // -------------------------------------------------------------------------
    // PUBLIC REQUESTS METHODS
    // -------------------------------------------------------------------------

    /**
     * Set and/or return current token
     *
     * @param  string  $sToken  (Optional) New token to set, obtained via \Payname\Auth methods
     *                          Default : null <=> only return current token without setting
     */
    public static function token($sToken = null) {
        if (!is_null($sToken)) {
            static::$_token = $sToken;
        }
        return static::$_token;
    }


    /**
     * GET request
     *
     * @param   array  $aOptions  GET request options
     *
     * @throws  Exception  On API error
     *
     * @return  array  API response
     */
    public static function get($aOptions) {
        $aOptions['method'] = 'GET';
        return static::_call($aOptions);
    }


    /**
     * POST request
     *
     * @param   array  $aOptions  POST request options
     *
     * @throws  Exception  On API error
     *
     * @return  array  API response
     */
    public static function post($aOptions) {
        $aOptions['method'] = 'POST';
        return static::_call($aOptions);
    }


    /**
     * PUT request
     *
     * @param   array  $aOptions  PUT request options
     *
     * @throws  Exception  On API error
     *
     * @return  array  API response
     */
    public static function put($aOptions) {
        $aOptions['method'] = 'PUT';
        return static::_call($aOptions);
    }


    /**
     * DELETE request
     *
     * @param   array  $aOptions  DELETE request options
     *
     * @throws  Exception  On API error
     *
     * @return  array  API response
     */
    public static function delete($aOptions) {
        $aOptions['method'] = 'DELETE';
        return static::_call($aOptions);
    }
}

